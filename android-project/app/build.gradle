apply plugin: 'com.android.library'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def sdl3Dir = properties.getProperty('sdl3.dir')
if (sdl3Dir == null) {
    throw new IllegalArgumentException('no [sdl3.dir] property in [local.properties] file')
}
def sdl3ttfDir = properties.getProperty('sdl3ttf.dir')
if (sdl3ttfDir == null) {
    throw new IllegalArgumentException('no [sdl3ttf.dir] property in [local.properties] file')
}

android {
    namespace 'com.kostahka.kengine'
    compileSdkVersion 34
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 34
        versionCode 1
        versionName '1.0'
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_PLATFORM=android-19', '-DANDROID_STL=c++_static',
                "-DSDL3_SRC_DIR=$sdl3Dir", "-DSDL3_TTF_SRC_DIR=$sdl3ttfDir"
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
        //    applicationVariants.all { variant ->
        //        tasks["merge${variant.name.capitalize()}Assets"]
        //            .dependsOn("externalNativeBuild${variant.name.capitalize()}")
        //    }

    sourceSets.main {
        jniLibs.srcDir 'libs'
    }
    externalNativeBuild {
            cmake {
                path '../../CMakeLists.txt'
            }
    }

    lint {
        abortOnError false
    }

// libraryVariants.all { variant ->
//     variant.outputs.each { output ->
//         def outputFile = output.outputFile
//         if (outputFile != null && outputFile.name.endsWith('.aar')) {
//             def fileName = 'org.libsdl.app.aar'
//             output.outputFile = new File(outputFile.parent, fileName)
//         }
//     }
// }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
